{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/e-commerce/src/context/ProductsContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport reducer from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst url = 'https://fakestoreapi.com/products/category/electronics'; // api where data will be fetched from\n\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, isLoading] = useState(false); // sets up state for Loading component\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [products, setProducts] = useState([]);\n  const [show, setShow] = useState(false);\n  const [productId, setProductId] = useState('');\n\n  const getProducts = async () => {\n    isLoading(true);\n\n    try {\n      const data = await axios.get(url);\n      const newProducts = data.data;\n      setProducts(newProducts);\n      isLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  let filtered = products.map(item => {\n    const {\n      title\n    } = item;\n    return { ...item,\n      title: title.toLowerCase()\n    };\n  }).filter(product => {\n    return product.title.includes(searchTerm.toLowerCase());\n  }); // really bad workaround for an issue i was having. in order to make product search case-insensitive, i  mapped products array (state) to a new array, and converted the title property to lowercase.this new array is then filtered - a check is done against the searchTerm (what is typed in the search box) which is also converted to lowercase. the title of each product is then converted to uppercase later on rendering. \n\n  const handleClick = e => {\n    const clicked = e.target.id;\n    console.log(products);\n    const filterId = products.filter(product => {\n      return product.id == clicked;\n    });\n    const newId = filterId[0].id;\n    console.log(productId);\n    setProductId(newId);\n    setShow(true) ? setShow(false) : setShow(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        loading,\n        searchTerm,\n        products,\n        setProducts,\n        setSearchTerm,\n        getProducts,\n        filtered,\n        show,\n        setShow,\n        handleClick\n      },\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(AppProvider, \"GQsuOzPcpLktR+WI/HkMzgK9IUk=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/e-commerce/src/context/ProductsContext.js"],"names":["axios","React","useState","useCallback","useContext","useEffect","reducer","url","AppContext","createContext","AppProvider","children","loading","isLoading","searchTerm","setSearchTerm","products","setProducts","show","setShow","productId","setProductId","getProducts","data","get","newProducts","error","console","log","filtered","map","item","title","toLowerCase","filter","product","includes","handleClick","e","clicked","target","id","filterId","newId","useGlobalContext"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, {useState, useCallback, useContext, useEffect} from 'react'\nimport reducer from './reducer'\n\nconst url ='https://fakestoreapi.com/products/category/electronics';\n// api where data will be fetched from\n\nconst AppContext = React.createContext();\n\n\nconst AppProvider = ({children}) => {\n\n        const [loading, isLoading] = useState(false)\n        // sets up state for Loading component\n        const [searchTerm, setSearchTerm] = useState('')\n        const [products, setProducts] = useState([])\n        const [show, setShow] = useState(false);\n        const [productId, setProductId] = useState('')\n\n\n        const getProducts =async () => {\n        isLoading(true)\n        try {\n        const data = await axios.get(url);\n        const newProducts = data.data;\n        setProducts(newProducts)\n        isLoading(false)\n        }  catch(error) {\n        console.log(error);\n        } }\n\n    \n\nlet filtered  = products.map((item) => { \n            const {title} = item;\n            return {...item, title: title.toLowerCase()}})\n            .filter((product)=> {\n    return product.title.includes(searchTerm.toLowerCase())  \n})\n\n// really bad workaround for an issue i was having. in order to make product search case-insensitive, i  mapped products array (state) to a new array, and converted the title property to lowercase.this new array is then filtered - a check is done against the searchTerm (what is typed in the search box) which is also converted to lowercase. the title of each product is then converted to uppercase later on rendering. \n\n     \n\n          const handleClick = (e) => {\n            \n                const clicked = e.target.id\n               console.log(products)\n    const filterId = products.filter(product =>  {\n    \n        return product.id == clicked })\n        const newId = filterId[0].id\n        console.log(productId)\n                    setProductId(newId)\n                        setShow(true) ? setShow(false) : setShow(true)\n\n\n        }\n      \n\n        \n\n    return<>\n    <AppContext.Provider value={{\n        loading,\n        searchTerm,\n        products,\n        setProducts,\n        setSearchTerm,\n        getProducts,\n        filtered,\n        show,\n        setShow,\n        handleClick\n\n    }}> {children}\n    </AppContext.Provider>\n    </>\n}\n\nexport const useGlobalContext = () => {\nreturn useContext(AppContext)\n}\n\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}