{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/simple-cocktails/src/components/context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\"; // api where data will be fetched from\n\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, isLoading] = useState(false); // sets up state for Loading component\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [cocktails, setCocktails] = useState([]);\n  const fetchDrinks = useCallback(async () => {\n    // useCallback - prevents infinite loop \n    try {\n      const response = await fetch(`${url}${searchTerm}`); // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n\n      const data = await response.json();\n      const {\n        drinks\n      } = data; // creates a new object 'drinks' with data array\n\n      console.log({\n        drinks\n      });\n\n      if ({\n        drinks\n      }) {\n        const newCocktails = drinks.map(drink => {\n          const {\n            idDrink,\n            strDrink,\n            strAlcoholic,\n            strDrinkThumb,\n            strGlass\n          } = drink; // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            info: strAlcoholic,\n            glass: strGlass\n          }; // returns new objec\n        });\n        setCocktails(newCocktails);\n      } else {\n        setCocktails([]);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }, [searchTerm]);\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        loading,\n        searchTerm,\n        cocktails,\n        setSearchTerm\n      },\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(AppProvider, \"QHtkj2cNhWWj1uLgFVNZWG97jhw=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/simple-cocktails/src/components/context.js"],"names":["React","useState","useCallback","useContext","useEffect","url","AppContext","createContext","AppProvider","children","loading","isLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","console","log","newCocktails","map","drink","idDrink","strDrink","strAlcoholic","strDrinkThumb","strGlass","id","name","image","info","glass","error","useGlobalContext"],"mappings":";;;;AACA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,SAAlD,QAAkE,OAAlE;;;AAEA,MAAMC,GAAG,GAAG,2DAAZ,C,CACA;;AAEA,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAE5B,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBV,QAAQ,CAAC,KAAD,CAArC,CAF4B,CAG5B;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMe,WAAW,GAAGd,WAAW,CAAC,YAAW;AACvC;AACA,QAAI;AACA,YAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAG,GAAEb,GAAI,GAAEO,UAAW,EAAtB,CAA5B,CADA,CAEA;;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAACC,QAAAA;AAAD,UAAWF,IAAjB,CAJA,CAKA;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,QAAAA;AAAD,OAAZ;;AACA,UAAI;AAACA,QAAAA;AAAD,OAAJ,EAAc;AACX,cAAMG,YAAY,GAAGH,MAAM,CAACI,GAAP,CAAYC,KAAD,IAAU;AACrC,gBAAM;AAACC,YAAAA,OAAD;AAASC,YAAAA,QAAT;AAAmBC,YAAAA,YAAnB;AAAiCC,YAAAA,aAAjC;AAAgDC,YAAAA;AAAhD,cAA4DL,KAAlE,CADqC,CAEzC;;AACI,iBAAO;AAACM,YAAAA,EAAE,EAAEL,OAAL;AAAcM,YAAAA,IAAI,EAAEL,QAApB;AAA8BM,YAAAA,KAAK,EAAEJ,aAArC;AAAoDK,YAAAA,IAAI,EAAEN,YAA1D;AAAwEO,YAAAA,KAAK,EAAEL;AAA/E,WAAP,CAHqC,CAIrC;AACH,SALmB,CAArB;AAMChB,QAAAA,YAAY,CAACS,YAAD,CAAZ;AACH,OARD,MAQQ;AACJT,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AACJ,KAlBD,CAmBA,OAAOsB,KAAP,EAAc;AACVf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACH;AACJ,GAxB8B,EAwB5B,CAACzB,UAAD,CAxB4B,CAA/B;AA0BAR,EAAAA,SAAS,CAAC,MAAM;AAACY,IAAAA,WAAW;AACnC,GADgB,EACd,CAACJ,UAAD,CADc,CAAT;AAGJ,sBAAM;AAAA,2BACN,QAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AACxBF,QAAAA,OADwB;AAExBE,QAAAA,UAFwB;AAGxBE,QAAAA,SAHwB;AAIxBD,QAAAA;AAJwB,OAA5B;AAAA,sBAKKJ,QALL;AAAA;AAAA;AAAA;AAAA;AAAA;AADM,mBAAN;AASH,CA7CD;;GAAMD,W;;KAAAA,W;AA+CN,OAAO,MAAM8B,gBAAgB,GAAG,MAAM;AAAA;;AACtC,SAAOnC,UAAU,CAACG,UAAD,CAAjB;AACC,CAFM;;IAAMgC,gB;;AAIb,SAAQhC,UAAR,EAAoBE,WAApB","sourcesContent":["\nimport React, {useState, useCallback, useContext, useEffect} from 'react'\n\nconst url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\"\n// api where data will be fetched from\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n\n        const [loading, isLoading] = useState(false)\n        // sets up state for Loading component\n        const [searchTerm, setSearchTerm] = useState('')\n        const [cocktails, setCocktails] = useState([])\n    \n        const fetchDrinks = useCallback(async() => {\n            // useCallback - prevents infinite loop \n            try {\n                const response = await fetch (`${url}${searchTerm}`)\n                // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n                const data = await response.json()\n                const {drinks} = data;\n                // creates a new object 'drinks' with data array\n                console.log({drinks})\n                if ({drinks}) {\n                   const newCocktails = drinks.map((drink)=> {\n                        const {idDrink,strDrink, strAlcoholic, strDrinkThumb, strGlass} = drink;\n                    // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n                        return {id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass}\n                        // returns new objec\n                    })\n                    setCocktails(newCocktails)\n                }  else {\n                    setCocktails([])\n                }\n            }\n            catch (error) {\n                console.log(error)\n            }\n        }, [searchTerm])\n\n        useEffect(() => {fetchDrinks()\n}, [searchTerm])\n\n    return<>\n    <AppContext.Provider value={{\n        loading,\n        searchTerm,\n        cocktails,\n        setSearchTerm\n    }}> {children}\n    </AppContext.Provider>\n    </>\n}\n\nexport const useGlobalContext = () => {\nreturn useContext(AppContext)\n}\n\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}