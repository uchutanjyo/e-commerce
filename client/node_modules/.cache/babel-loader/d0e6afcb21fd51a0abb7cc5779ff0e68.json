{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/e-commerce/src/context/ProductsContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst url = 'https://fakestoreapi.com/products/category/electronics'; // api where data will be fetched from\n\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, isLoading] = useState(false); // sets up state for Loading component\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [products, setProducts] = useState([]);\n\n  const getProducts = async () => {\n    isLoading(true);\n\n    try {\n      const data = await axios.get(url);\n      const newProducts = data.data;\n      setProducts(newProducts);\n      isLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(e => {\n    e.preventDefault();\n    getProducts();\n  }, [searchTerm]);\n  console.log(products); // const fetchDrinks = useCallback(async() => {\n  //     // useCallback - prevents infinite loop \n  //     try {\n  //         const response = await fetch (`${url}${searchTerm}`)\n  //         // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n  //         const data = await response.json()\n  //         const {drinks} = data;\n  //         // creates a new object 'drinks' with data array\n  //         if ({drinks}) {\n  //            const newCocktails = drinks.map((drink)=> {\n  //                 const {idDrink,strDrink, strAlcoholic, strDrinkThumb, strGlass} = drink;\n  //             // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n  //                 return {id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass}\n  //                 // returns newCocktails as a new object with each destructured property used as value with new key names\n  //             })\n  //             setCocktails(newCocktails)\n  //             // sets cocktails state to newCocktails array\n  //         }  else {\n  //             setCocktails([])\n  //             // if no data fetched, keep cocktails state an empty array\n  //         }\n  //     }\n  //     catch (error) {\n  //         console.log(error)\n  //     }\n  // }, [searchTerm])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        loading,\n        searchTerm,\n        products,\n        setProducts,\n        setSearchTerm\n      },\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(AppProvider, \"vA0VzsZpIq/o5+e8i1FOmL/MRlI=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/e-commerce/src/context/ProductsContext.js"],"names":["axios","React","useState","useCallback","useContext","useEffect","url","AppContext","createContext","AppProvider","children","loading","isLoading","searchTerm","setSearchTerm","products","setProducts","getProducts","data","get","newProducts","error","console","log","e","preventDefault","useGlobalContext"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,UAAtC,EAAkDC,SAAlD,QAAkE,OAAlE;;;AAEA,MAAMC,GAAG,GAAE,wDAAX,C,CACA;;AAEA,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAE5B,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBV,QAAQ,CAAC,KAAD,CAArC,CAF4B,CAG5B;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;;AAGA,QAAMe,WAAW,GAAE,YAAY;AAC/BL,IAAAA,SAAS,CAAC,IAAD,CAAT;;AACA,QAAI;AACJ,YAAMM,IAAI,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAUb,GAAV,CAAnB;AACA,YAAMc,WAAW,GAAGF,IAAI,CAACA,IAAzB;AACAF,MAAAA,WAAW,CAACI,WAAD,CAAX;AACAR,MAAAA,SAAS,CAAC,KAAD,CAAT;AACC,KALD,CAKG,OAAMS,KAAN,EAAa;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACC;AAAE,GATH;;AAWAhB,EAAAA,SAAS,CAAEmB,CAAD,IAAO;AACbA,IAAAA,CAAC,CAACC,cAAF;AACJR,IAAAA,WAAW;AAEV,GAJQ,EAIN,CAACJ,UAAD,CAJM,CAAT;AAKAS,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ,EAxB4B,CA0B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKJ,sBAAM;AAAA,2BACN,QAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,KAAK,EAAE;AACxBJ,QAAAA,OADwB;AAExBE,QAAAA,UAFwB;AAGxBE,QAAAA,QAHwB;AAIxBC,QAAAA,WAJwB;AAKxBF,QAAAA;AALwB,OAA5B;AAAA,sBAMKJ,QANL;AAAA;AAAA;AAAA;AAAA;AAAA;AADM,mBAAN;AAUH,CAlED;;GAAMD,W;;KAAAA,W;AAoEN,OAAO,MAAMiB,gBAAgB,GAAG,MAAM;AAAA;;AACtC,SAAOtB,UAAU,CAACG,UAAD,CAAjB;AACC,CAFM;;IAAMmB,gB;;AAIb,SAAQnB,UAAR,EAAoBE,WAApB","sourcesContent":["import axios from 'axios'\nimport React, {useState, useCallback, useContext, useEffect} from 'react'\n\nconst url ='https://fakestoreapi.com/products/category/electronics';\n// api where data will be fetched from\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n\n        const [loading, isLoading] = useState(false)\n        // sets up state for Loading component\n        const [searchTerm, setSearchTerm] = useState('')\n        const [products, setProducts] = useState([])\n\n    \n        const getProducts =async () => {\n        isLoading(true)\n        try {\n        const data = await axios.get(url);\n        const newProducts = data.data;\n        setProducts(newProducts)\n        isLoading(false)\n        }  catch(error) {\n        console.log(error);\n        } }\n\n        useEffect((e) => {\n            e.preventDefault()\n        getProducts()\n        \n        }, [searchTerm])\n        console.log(products)\n        \n        // const fetchDrinks = useCallback(async() => {\n        //     // useCallback - prevents infinite loop \n        //     try {\n        //         const response = await fetch (`${url}${searchTerm}`)\n        //         // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n        //         const data = await response.json()\n        //         const {drinks} = data;\n        //         // creates a new object 'drinks' with data array\n        //         if ({drinks}) {\n        //            const newCocktails = drinks.map((drink)=> {\n        //                 const {idDrink,strDrink, strAlcoholic, strDrinkThumb, strGlass} = drink;\n        //             // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n        //                 return {id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass}\n        //                 // returns newCocktails as a new object with each destructured property used as value with new key names\n        //             })\n        //             setCocktails(newCocktails)\n        //             // sets cocktails state to newCocktails array\n        //         }  else {\n        //             setCocktails([])\n        //             // if no data fetched, keep cocktails state an empty array\n        //         }\n        //     }\n        //     catch (error) {\n        //         console.log(error)\n        //     }\n        // }, [searchTerm])\n\n\n\n\n    return<>\n    <AppContext.Provider value={{\n        loading,\n        searchTerm,\n        products,\n        setProducts,\n        setSearchTerm\n    }}> {children}\n    </AppContext.Provider>\n    </>\n}\n\nexport const useGlobalContext = () => {\nreturn useContext(AppContext)\n}\n\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}