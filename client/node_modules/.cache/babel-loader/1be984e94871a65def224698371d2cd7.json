{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/e-commerce/src/components/SearchForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useGlobalContext } from '../context/ProductsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchForm = () => {\n  _s();\n\n  const {\n    setSearchTerm,\n    searchTerm,\n    products,\n    setProducts\n  } = useGlobalContext();\n  const searchValue = useRef(''); // sets up reference with name searchValue . initial state is an empty array\n\n  const searchProduct = () => {\n    setSearchTerm(searchValue.current.value); // function which sets the searchTerm state as the current value of whatever the reference will be (coming up below)\n  };\n\n  React.useEffect(() => {\n    searchValue.current.focus();\n  }, []);\n  React.useEffect(() => {\n    let filtered = products.filter(product => {\n      product.title.includes(searchTerm);\n    });\n    setProducts(filtered);\n  }, [searchValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchForm\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"input\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"search\",\n        id: \"name\",\n        ref: searchValue,\n        onChange: searchProduct\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchForm, \"N10JLBGaV5F1VkQfZO71xEo8k0o=\", false, function () {\n  return [useGlobalContext];\n});\n\n_c = SearchForm;\nexport default SearchForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchForm\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/e-commerce/src/components/SearchForm.js"],"names":["React","useRef","useGlobalContext","SearchForm","setSearchTerm","searchTerm","products","setProducts","searchValue","searchProduct","current","value","useEffect","focus","filtered","filter","product","title","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,MAAf,QAA4B,OAA5B;AACA,SAASC,gBAAT,QAAiC,4BAAjC;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA;AAAtC,MAAqDL,gBAAgB,EAA3E;AAEI,QAAMM,WAAW,GAAGP,MAAM,CAAC,EAAD,CAA1B,CAHiB,CAIjB;;AAEJ,QAAMQ,aAAa,GAAG,MAAM;AACxBL,IAAAA,aAAa,CAACI,WAAW,CAACE,OAAZ,CAAoBC,KAArB,CAAb,CADwB,CAExB;AACH,GAHD;;AAKEX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACxBJ,IAAAA,WAAW,CAACE,OAAZ,CAAoBG,KAApB;AACD,GAFG,EAED,EAFC;AAIEb,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACrB,QAAIE,QAAQ,GAAER,QAAQ,CAACS,MAAT,CAAiBC,OAAD,IAAa;AAACA,MAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuBb,UAAvB;AAAmC,KAAjE,CAAd;AAELE,IAAAA,WAAW,CAACO,QAAD,CAAX;AACD,GAJK,EAIH,CAACN,WAAD,CAJG;AAMN,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BAEH;AAAM,MAAA,MAAM,EAAC,OAAb;AAAA,6BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,QAA/B;AAAwC,QAAA,EAAE,EAAC,MAA3C;AAAkD,QAAA,GAAG,EAAEA,WAAvD;AAAoE,QAAA,QAAQ,EAAEC;AAA9E;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFG;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA7BD;;GAAMN,U;UACyDD,gB;;;KADzDC,U;AA+BN,eAAeA,UAAf","sourcesContent":["import React, {useRef} from 'react';\nimport { useGlobalContext } from '../context/ProductsContext';\n\n\nconst SearchForm = () => {\n    const {setSearchTerm, searchTerm, products, setProducts} = useGlobalContext()\n\n        const searchValue = useRef('')\n        // sets up reference with name searchValue . initial state is an empty array\n\n    const searchProduct = () => {\n        setSearchTerm(searchValue.current.value)\n        // function which sets the searchTerm state as the current value of whatever the reference will be (coming up below)\n    }\n\n      React.useEffect(() => {\n    searchValue.current.focus()\n  }, [])\n\n        React.useEffect(() => {\n         let filtered= products.filter((product) => {product.title.includes(searchTerm)})\n\n    setProducts(filtered)\n  }, [searchValue])\n\n  return (\n    <div className='SearchForm'>\n\n <form action=\"input\">\n   <input type=\"text\" placeholder=\"search\" id=\"name\" ref={searchValue} onChange={searchProduct}/>\n </form>\n    </div>\n  );\n};\n\nexport default SearchForm;\n"]},"metadata":{},"sourceType":"module"}