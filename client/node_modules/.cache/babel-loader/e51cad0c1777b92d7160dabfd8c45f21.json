{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/e-commerce/src/context/Context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useState, useCallback, useContext, useEffect } from 'react';\nimport reducer from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [loading, isLoading] = useState(false); // sets up state for Loading component\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [products, setProducts] = useState([]);\n  const [show, setShow] = useState(false);\n  const [cart, setCart] = useState([]);\n  const [deleted, setDeleted] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n  const cartUrl = 'http://localhost:8001/cart';\n\n  const getCart = async () => {\n    let isMounted = true;\n    isLoading(true);\n    const data = await axios.get(cartUrl).then(data => {\n      if (isMounted) {\n        // const newCart = data.data\n        setCart(data.data);\n        isLoading(false);\n      }\n    });\n    return () => isMounted = false.catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n\n    if (isMounted) {\n      getCart();\n      return () => isMounted = false;\n    }\n  }, [redirect]);\n  useEffect(() => {\n    let isMounted = true;\n\n    if (isMounted) {\n      getCart();\n      return () => isMounted = false;\n    }\n  }, [deleted]);\n  const url = 'http://localhost:8001/products';\n\n  const getProducts = async () => {\n    let isMounted = true;\n    isLoading(true);\n\n    try {\n      const data = await axios.get(url).then(data => {\n        if (isMounted) {\n          setProducts(data.data);\n          isLoading(false);\n          return () => isMounted = false;\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    let isMounted = true;\n    getProducts();\n    return () => isMounted = false;\n  }, []);\n  let filtered = products.map(item => {\n    const {\n      title\n    } = item;\n    return { ...item,\n      title: title.toLowerCase()\n    };\n  }).filter(product => {\n    return product.title.includes(searchTerm.toLowerCase());\n  });\n  console.log(filtered); // really bad workaround for an issue i was having. in order to make product search case-insensitive, i  mapped products array (state) to a new array, and converted the title property to lowercase.this new array is then filtered - a check is done against the searchTerm (what is typed in the search box) which is also converted to lowercase. the title of each product is then converted to uppercase later on rendering. \n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        loading,\n        searchTerm,\n        products,\n        setSearchTerm,\n        getProducts,\n        filtered,\n        show,\n        setShow,\n        cart,\n        setCart,\n        getCart,\n        redirect,\n        setRedirect,\n        getCart,\n        deleted,\n        setDeleted // handleClick\n\n      },\n      children: [\" \", children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(AppProvider, \"RUNTAak8XcHRyzCQkuftdBq1wxo=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/e-commerce/src/context/Context.js"],"names":["axios","React","useState","useCallback","useContext","useEffect","reducer","AppContext","createContext","AppProvider","children","loading","isLoading","searchTerm","setSearchTerm","products","setProducts","show","setShow","cart","setCart","deleted","setDeleted","redirect","setRedirect","cartUrl","getCart","isMounted","data","get","then","catch","error","console","log","url","getProducts","filtered","map","item","title","toLowerCase","filter","product","includes","useGlobalContext"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, {useState, useCallback, useContext, useEffect} from 'react'\nimport reducer from './reducer'\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n\n        const [loading, isLoading] = useState(false)\n        // sets up state for Loading component\n        const [searchTerm, setSearchTerm] = useState('')\n        const [products, setProducts] = useState([])\n        const [show, setShow] = useState(false);\n\n        const [cart, setCart] = useState([])\n\n        const [deleted, setDeleted] = useState(false)\n        const [redirect, setRedirect] = useState(false)\n \n\n   const cartUrl =\n    'http://localhost:8001/cart'\n\n         \n   const getCart = async () => {\n       let isMounted = true;\n        isLoading(true)\n        const data = await axios.get(cartUrl)\n      .then((data) => {\n            if (isMounted) {\n          // const newCart = data.data\n            setCart(data.data)\n        isLoading(false)\n            }\n        })\n        return () => isMounted = false\n          .catch(error => {\n        console.log(error);\n        }\n        )}\n\n           useEffect(()=> {\n                 let isMounted = true\n         \n                 if (isMounted) {\n                getCart()\n              return () => isMounted = false;  } \n        }, [redirect]) \n\n           useEffect(()=> {\n                 let isMounted = true\n                     if (isMounted) {\n                getCart()\n              return () => isMounted = false; }\n              \n        }, [deleted]) \n\n    \n\n          const url =\n    'http://localhost:8001/products'\n  \n        const getProducts =async () => {\n        let isMounted = true\n        isLoading(true)\n        try {\n        const data = await axios.get(url)\n        .then ((data) => {\n            if (isMounted) {\n        setProducts(data.data)\n        isLoading(false)\n          return () => isMounted = false;\n\n            }\n        })\n        }  catch(error) {\n        console.log(error);\n        }\n         }\n\n           useEffect(()=> {\n               let isMounted = true\n            getProducts();\n            return () => isMounted = false;\n        }, [])\n    \n\nlet filtered  = products.map((item) => { \n            const {title} = item;\n            return {...item, title: title.toLowerCase()}})\n            .filter((product)=> {\n    return product.title.includes(searchTerm.toLowerCase())  \n})\n\nconsole.log(filtered)\n\n// really bad workaround for an issue i was having. in order to make product search case-insensitive, i  mapped products array (state) to a new array, and converted the title property to lowercase.this new array is then filtered - a check is done against the searchTerm (what is typed in the search box) which is also converted to lowercase. the title of each product is then converted to uppercase later on rendering. \n \n\n    return<>\n    <AppContext.Provider value={{\n        loading,\n        searchTerm,\n        products,\n        setSearchTerm,\n        getProducts,\n        filtered,\n        show,\n        setShow,\n        cart,\n        setCart,\n        getCart,\n        redirect,\n        setRedirect,\n        getCart,\n        deleted, \n        setDeleted\n        // handleClick\n\n    }}> {children}\n    </AppContext.Provider>\n    </>\n}\n\nexport const useGlobalContext = () => {\nreturn useContext(AppContext)\n}\n\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}