{"ast":null,"code":"// import React, {useState, useCallback, useContext, useEffect} from 'react'\n// const url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\"\n// // api where data will be fetched from\n// const AppContext = React.createContext();\n// const AppProvider = ({children}) => {\n//         const [loading, isLoading] = useState(false)\n//         // sets up state for Loading component\n//         const [searchTerm, setSearchTerm] = useState('')\n//         const [cocktails, setCocktails] = useState([])\n//         const fetchDrinks = useCallback(async() => {\n//             // useCallback - prevents infinite loop \n//             try {\n//                 const response = await fetch (`${url}${searchTerm}`)\n//                 // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n//                 const data = await response.json()\n//                 const {drinks} = data;\n//                 // creates a new object 'drinks' with data array\n//                 console.log({drinks})\n//                 if ({drinks}) {\n//                    const newCocktails = drinks.map((drink)=> {\n//                         const {idDrink,strDrink, strAlcoholic, strDrinkThumb, strGlass} = drink;\n//                     // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n//                         return {id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass}\n//                         // returns newCocktails as a new object with each destructured property used as value with new key names\n//                     })\n//                     setCocktails(newCocktails)\n//                     // sets cocktails state to newCocktails array\n//                 }  else {\n//                     setCocktails([])\n//                     // if no data fetched, keep cocktails state an empty array\n//                 }\n//             }\n//             catch (error) {\n//                 console.log(error)\n//             }\n//         }, [searchTerm])\n//         useEffect(() => {fetchDrinks()\n// }, [searchTerm])\n// // fetchDrinks called on initial render and every time the searchTerm is changed (functionality in SearchForm.js)\n//     return<>\n//     <AppContext.Provider value={{\n//         loading,\n//         searchTerm,\n//         cocktails,\n//         setSearchTerm\n//     }}> {children}\n//     </AppContext.Provider>\n//     </>\n// }\n// export const useGlobalContext = () => {\n// return useContext(AppContext)\n// }\n// export {AppContext, AppProvider}","map":{"version":3,"sources":["/home/matt/Documents/new-personal-projects/e-commerce/src/components/context.js"],"names":[],"mappings":"AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["\n// import React, {useState, useCallback, useContext, useEffect} from 'react'\n\n// const url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\"\n// // api where data will be fetched from\n\n// const AppContext = React.createContext();\n\n// const AppProvider = ({children}) => {\n\n//         const [loading, isLoading] = useState(false)\n//         // sets up state for Loading component\n//         const [searchTerm, setSearchTerm] = useState('')\n//         const [cocktails, setCocktails] = useState([])\n    \n//         const fetchDrinks = useCallback(async() => {\n//             // useCallback - prevents infinite loop \n//             try {\n//                 const response = await fetch (`${url}${searchTerm}`)\n//                 // fetches data from url - initial call on initial render has searchTerm's state set to an empty string, so, the data fetched will not be search-specific - just an array of 25 drink objects.\n//                 const data = await response.json()\n//                 const {drinks} = data;\n//                 // creates a new object 'drinks' with data array\n//                 console.log({drinks})\n//                 if ({drinks}) {\n//                    const newCocktails = drinks.map((drink)=> {\n//                         const {idDrink,strDrink, strAlcoholic, strDrinkThumb, strGlass} = drink;\n//                     // creates new variable newCocktails - maps 'drinks' array, destructures specific properties from each drink\n//                         return {id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass}\n//                         // returns newCocktails as a new object with each destructured property used as value with new key names\n//                     })\n//                     setCocktails(newCocktails)\n//                     // sets cocktails state to newCocktails array\n//                 }  else {\n//                     setCocktails([])\n//                     // if no data fetched, keep cocktails state an empty array\n//                 }\n//             }\n//             catch (error) {\n//                 console.log(error)\n//             }\n//         }, [searchTerm])\n\n//         useEffect(() => {fetchDrinks()\n// }, [searchTerm])\n// // fetchDrinks called on initial render and every time the searchTerm is changed (functionality in SearchForm.js)\n\n//     return<>\n//     <AppContext.Provider value={{\n//         loading,\n//         searchTerm,\n//         cocktails,\n//         setSearchTerm\n//     }}> {children}\n//     </AppContext.Provider>\n//     </>\n// }\n\n// export const useGlobalContext = () => {\n// return useContext(AppContext)\n// }\n\n// export {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}